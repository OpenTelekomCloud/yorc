pipeline {
    agent none
    parameters {
        choice(name: 'INFRA_FILTER', choices: ['all', 'openstack', 'gcp'], description: 'Run on specific infrastructure (all by default)')
        booleanParam defaultValue: false, description: 'Are we testing a premium version', name: 'PREMIUM'
        booleanParam defaultValue: false, description: 'Should we run slow tests? (run nightly)', name: 'NIGHTLY'
    }


    environment {
        K8S_CLOUD_NAME="${ENV_YORC_CI_K8S}"
        GCP_CREDS_ID="${ENV_YORC_CI_GCP_CREDS_ID}"
        GCP_BUCKET_NAME="${ENV_YORC_CI_GCP_BUCKET_NAME}"
    }

    stages {
        stage('Build Yorc') {
            agent {
                kubernetes {
                    cloud "${K8S_CLOUD_NAME}"
                    defaultContainer 'yorc-ci-builder'
                    yaml """
apiVersion: v1
kind: Pod
spec:
  containers:
  - name: yorc-ci-builder
    image: golang:1-stretch
    command:
    - cat
    tty: true
    env:
    - name: "HOME"
      value: "/tmp/buildhome"
    - name: "XDG_CACHE_HOME"
      value: "/tmp/.cache"
"""
                }
            }
            steps {
                script {
                    if (env.PREMIUM) {
                        env.BUILD_TAGS="premium"
                    } else {
                        env.BUILD_TAGS=""
                    }

                    def randomPath = UUID.randomUUID().toString()
                    env.gsPath = "${GCP_BUCKET_NAME}/${randomPath}/"
                    env.yorcDownloadURL = "https://storage.googleapis.com/${env.gsPath}yorc.tgz"
                }
                echo "gs path: ${env.gsPath}"
                echo "yorc DL URL: ${env.yorcDownloadURL}"

                sh("""#!/usr/bin/env bash
                    unset GOPPROXY
                    apt-get update && apt-get -qy install zip unzip
                    make tools
                    SKIP_TESTS=1 BUILD_TAGS="${env.BUILD_TAGS}" make
                    tar czvf yorc.tgz yorc
                    """
                )
                googleStorageUpload bucket: "gs://${env.gsPath}", pattern: 'yorc.tgz', sharedPublicly: true, credentialsId: "${GCP_CREDS_ID}", showInline: true
            }
        }
        stage('Compute Generic Behave Tags') {
            steps {

                script {
                    def godog_tags = " -t '@CI"
                    if ("${env.PREMIUM}" != "true") {
                        godog_tags += " && ~@premium"
                    }
                    if ("${env.NIGHTLY}" != "true") {
                        godog_tags += " && ~@slow"
                    }
                    env.godog_tags = godog_tags+'\''
                }

                echo "godog_tags: ${env.godog_tags}"
            }
        }
        stage('Run on infra') {
            matrix {
                agent {
                    kubernetes {
                        cloud "${K8S_CLOUD_NAME}"
                        defaultContainer 'yorc-ci-exec'
                        yaml """
apiVersion: v1
kind: Pod
spec:
  containers:
  - name: yorc-ci-exec
    image: ystia/yorc-ci-it-runner:latest
    command:
    - cat
    tty: true
"""
                    }
                }
                when { anyOf {
                    expression { params.INFRA_FILTER == 'all' }
                    expression { params.INFRA_FILTER == env.INFRASTRUCTURE }
                } }
                axes {
                    axis {
                        name 'INFRASTRUCTURE'
                        values 'openstack', 'gcp'
                    }
                }

                stages {
                    stage('Download Forge components') {
                        steps {
                            sh 'mkdir -p testdata/ci/components'
                            dir('testdata/ci/components') {
                                sh """#!/usr/bin/env bash
                                    source /usr/local/lib/yorc-ci-utils.sh
                                    forgeCompsURL="\$(getURLFromPart "https://ystia.jfrog.io/ystia/binaries/ystia/forge/dist/develop" 'all-types-[0-9].*?.zip')"
                                    echo "Downloading Forge components from \${forgeCompsURL}"
                                    curl -L "\${forgeCompsURL}" -o all-types.zip
                                    unzip all-types.zip
                                """
                            }
                        }
                    }

                    stage('Download yorc') {
                        steps {
                            dir('testdata/ci') {
                                // this could also be done using stash/unstash but this way we can test before bootstrap if it works
                                echo "downloading Yorc from ${env.yorcDownloadURL}"
                                sh """#!/usr/bin/env bash
                                    curl -L "${env.yorcDownloadURL}" -o yorc.tgz
                                    tar xzvf yorc.tgz
                                """
                            }
                        }
                    }
                }
            }
        }
    }
}

