// Code generated by go-enum
// DO NOT EDIT!

package events

import (
	"fmt"
)

const (
	// LogLevelINFO is a LogLevel of type INFO
	LogLevelINFO LogLevel = iota
	// LogLevelDEBUG is a LogLevel of type DEBUG
	LogLevelDEBUG
	// LogLevelWARN is a LogLevel of type WARN
	LogLevelWARN
	// LogLevelERROR is a LogLevel of type ERROR
	LogLevelERROR
)

const _LogLevelName = "INFODEBUGWARNERROR"

var _LogLevelMap = map[LogLevel]string{
	0: _LogLevelName[0:4],
	1: _LogLevelName[4:9],
	2: _LogLevelName[9:13],
	3: _LogLevelName[13:18],
}

func (i LogLevel) String() string {
	if str, ok := _LogLevelMap[i]; ok {
		return str
	}
	return fmt.Sprintf("LogLevel(%d)", i)
}

var _LogLevelValue = map[string]LogLevel{
	_LogLevelName[0:4]:   0,
	_LogLevelName[4:9]:   1,
	_LogLevelName[9:13]:  2,
	_LogLevelName[13:18]: 3,
}

// ParseLogLevel attempts to convert a string to a LogLevel
func ParseLogLevel(name string) (LogLevel, error) {
	if x, ok := _LogLevelValue[name]; ok {
		return LogLevel(x), nil
	}
	return LogLevel(0), fmt.Errorf("%s is not a valid LogLevel", name)
}
