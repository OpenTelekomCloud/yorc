tosca_definitions_version: alien_dsl_2_0_0

description: Consul Starlings Sample
template_name: consul-types
template_version: 1.0.0
template_author: admin


node_types:
  starlings.nodes.Consul:
    derived_from: tosca.nodes.SoftwareComponent
    description: Installation of a Consul Server or Agent
    tags:
      icon: /images/consul-icon.png
    properties:
      install_dnsmasq:
        type: boolean
        description: >
          By default, a dnsmask is installed as a DNS proxy.
          It is sometimes needed to remove it if another DNS is already installed (bind for example)
        default: true
      installation_directory:
        type: string
        description: Installation path of consul
        default: ~/consul
      datacenter:
        type: string
        description: Datacenter name
        default: dc1
      component_version:
        type: version
        description: the Consul version installed.
        default: 0.5.2
        constraints:
          - equal: 0.5.2
    attributes:
      consul_mode: { get_operation_output: [ SELF, Standard, Configure, CONSUL_MODE ] } 
    capabilities:
      agent:
        type: starlings.capabilities.ConsulAgent
      server:
        type: starlings.capabilities.ConsulServer
      wan:
        type: starlings.capabilities.ConsulServerWAN
    requirements:
      - server_endpoint: starlings.capabilities.ConsulServer
        relationship_type: starlings.relationships.ConnectsConsulAgentToServer
        lower_bound: 0
        upper_bound: 1
      - wan_endpoint: starlings.capabilities.ConsulServerWAN
        relationship_type: starlings.relationships.ConnectsConsulServerWAN
        lower_bound: 0
        upper_bound: 1
    interfaces:
      Standard:
        create:
          description: Consul installation step
          inputs:
            INSTALL_DNSMASQ: { get_property: [SELF, install_dnsmasq] }
            INSTALL_DIR: { get_property: [SELF, installation_directory] }
            IP_ADDRESS: { get_attribute: [HOST, private_address] }
          implementation: ansible/consul_install.yaml
        configure:
          inputs:
            INSTALL_DIR: { get_property: [SELF, installation_directory] }
            DATACENTER: { get_property: [SELF, datacenter] }
            IP_ADDRESS: { get_attribute: [HOST, private_address] }
            WAN_ADDRESS: { get_attribute: [HOST, public_address] }
          implementation: ansible/consul_configure.yaml
        start:
          inputs:
            INSTALL_DIR: { get_property: [SELF, installation_directory] }
            CONSUL_MODE: { get_attribute: [ SELF, consul_mode ] }
          implementation: ansible/consul_start.yml
        stop:
          inputs:
            INSTALL_DIR: { get_property: [SELF, installation_directory] }
          implementation: ansible/consul_stop.yaml
      custom:
        maintenance_on:
          inputs:
            MAINT_MODE: "on"
            INSTALL_DIR: { get_property: [SELF, installation_directory] }
          implementation: ansible/consul_maint.yml
        maintenance_off:
          inputs:
            MAINT_MODE: "off"
            INSTALL_DIR: { get_property: [SELF, installation_directory] }
          implementation: ansible/consul_maint.yml
    artifacts:
      - scripts: scripts
        type: tosca.artifacts.File
      - utils_scripts: utils_scripts
        type: tosca.artifacts.File

capability_types:
  starlings.capabilities.ConsulAgent:
    derived_from: tosca.capabilities.Root
  starlings.capabilities.ConsulServer:
    derived_from: tosca.capabilities.Root
  starlings.capabilities.ConsulServerWAN:
    derived_from: tosca.capabilities.Root

relationship_types:
  starlings.relationships.ConnectsConsulAgentToServer:
    derived_from: tosca.relationships.ConnectsTo
    description: >
      Connects a Consul agent to a Consul server
    valid_targets: [ starlings.capabilities.ConsulServer ]
    interfaces:
      Configure:
        pre_configure_source:
          inputs:
            SERVER_IP: { get_attribute: [TARGET, private_address] }
            INSTALL_DIR: { get_property: [SOURCE, installation_directory] }
          implementation: ansible/consul_connects_agent_to_server.yml
    artifacts:
      - scripts: scripts
        type: tosca.artifacts.File
      - utils_scripts: utils_scripts
        type: tosca.artifacts.File
  starlings.relationships.ConnectsConsulServerWAN:
    derived_from: tosca.relationships.ConnectsTo
    description: >
      Connects a Consul server to another Consul server using its WAN address
    valid_targets: [ starlings.capabilities.ConsulServerWAN ]
    interfaces:
      Configure:
        pre_configure_source:
          inputs:
            SERVER_WAN_IP: { get_attribute: [TARGET, public_address] }
            INSTALL_DIR: { get_property: [SOURCE, installation_directory] }
          implementation: ansible/consul_connects_servers_wan.yaml
    artifacts:
      scripts:
        file: scripts
        type: tosca.artifacts.File
      utils_scripts:
        file: utils_scripts
        type: tosca.artifacts.File
  starlings.relationships.ConnectsToConsulAgent:
    derived_from: tosca.relationships.ConnectsTo
    description: >
      Connects to a Consul agent
    valid_targets: [ starlings.capabilities.ConsulAgent ]
