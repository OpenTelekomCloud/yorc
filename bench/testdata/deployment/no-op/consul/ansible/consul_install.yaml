- name: Install dnsmasq
  hosts: all
  strategy: free
  become: true
  become_method: sudo
  tasks:
    # Install dnsmasq
    - name: update apt
      apt:
        update_cache: yes
        cache_valid_time: 3600
      when: ansible_os_family == "Debian" and INSTALL_DNSMASQ == "true"

    - name: install deps (Ubuntu)
      apt:
        pkg: dnsmasq
        state: installed
      when: ansible_os_family == "Debian"  and INSTALL_DNSMASQ == "true"
    
    - name: tweaks 4 debian-like
      lineinfile:
        name: /etc/default/dnsmasq 
        regexp: "^IGNORE_RESOLVCONF="
        line: "IGNORE_RESOLVCONF=yes"
        state: present
      when:  ansible_os_family == "Debian"  and INSTALL_DNSMASQ == "true"

    - name: install deps (RHEL)
      yum:
        name: dnsmasq
        state: installed
      when: ansible_os_family == "RedHat" and INSTALL_DNSMASQ == "true"

    - name: install dnsmasq conf for starlings
      copy:
        src: files/dnsmasq.conf
        dest: /etc/dnsmasq.conf
        backup: yes  
      when: INSTALL_DNSMASQ == "true"

    - name: preserve resolv.conf (RHEL)
      copy:
        src: /etc/resolv.conf
        dest: /etc/resolv.dnsmasq.conf
        remote_src: True
        force: no
      when: ansible_os_family == "RedHat" and INSTALL_DNSMASQ == "true"
 
    - name: tweaks 4 RedHat-like
      lineinfile:
        name: /etc/dnsmasq.conf 
        regexp: "^resolv-file="
        line: "resolv-file=/etc/resolv.dnsmasq.conf"
        state: present
      when:  ansible_os_family == "RedHat"  and INSTALL_DNSMASQ == "true"
      
    - name: list network interfaces conf files
      find:
        paths: "/etc/sysconfig/network-scripts/"
        patterns: "ifcfg-eth*"
      register: net_if
      when:  ansible_os_family == "RedHat"  and INSTALL_DNSMASQ == "true"
    
    - name: update network interfaces conf files
      lineinfile:
        dest: "{{item.path}}"
        regexp: "^PEERDNS="
        line: "PEERDNS=no"
        state: present
      with_items: "{{net_if.files | default() }}"
      when: (not net_if | skipped) and INSTALL_DNSMASQ == "true" and ansible_os_family == "RedHat" 

    - name: Restart dnsmasq
      service:
        name: dnsmasq
        enabled: yes
        state: restarted
      when: INSTALL_DNSMASQ == "true"

    - name: setup resolv.conf
      copy:
        src: files/resolv.conf
        dest: /etc/resolv.conf
        force: yes
      when: ansible_os_family == "RedHat" and INSTALL_DNSMASQ == "true"
 
 
- name: Install consul
  hosts: all
  strategy: free
  tasks:
    - name: resolve install dir 
      shell: "readlink -f {{INSTALL_DIR}}"
      register: installdir_shell_res

    - name: overwrite install dir
      set_fact: 
        ABS_INSTALL_DIR="{{installdir_shell_res.stdout}}"   

    - name: create consul dirs
      file:
        name: "{{INSTALL_DIR}}/{{item}}"
        state: directory
      with_items:
        - "logs"
        - "work"
        - "config"

    - name: copy consul bin
      unarchive:
        src: files/consul.tgz
        dest: "{{INSTALL_DIR}}"
        creates: "{{INSTALL_DIR}}/consul"
        mode: "u=rx,g=r,o=r"  

    - name: Setup base config for consul
      template: 
        src: files/1_main_conf.json.j2
        dest: "{{INSTALL_DIR}}/config/1_main_conf.json"

    - name: Install consul startup script
      template: 
        src: files/consul_start.sh.j2
        dest: "{{INSTALL_DIR}}/consul_start.sh"
        mode: "u=rwx,g=rwx,o=r" 

    - name: Install consul maintenance script
      template: 
        src: files/consul_maintenance.sh.j2
        dest: "{{INSTALL_DIR}}/consul_maintenance.sh"
        mode: "u=rwx,g=rwx,o=r" 
    
    - name: create starlings conf dir
      file:
        dest: "~/.starlings"
        state: directory

    - name: store install dir
      lineinfile:
        dest: "~/.starlings/starlings_consul_env.sh"
        regexp: "^CONSUL_HOME="
        line: "CONSUL_HOME={{ABS_INSTALL_DIR}}"
        state: present
        create: yes
