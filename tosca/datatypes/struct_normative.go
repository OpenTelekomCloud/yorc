// Copyright 2019 Bull S.A.S. Atos Technologies - Bull, Rue Jean Jaures, B.P.68, 78340, Les Clayes-sous-Bois, France.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by tdt2go
// DO NOT EDIT! ANY CHANGES MAY BE OVERWRITTEN.

package datatypes

import (
	"time"
)

// Credential is the generated representation of tosca.datatypes.Credential data type
//
// The Credential type is a complex TOSCA data Type used when describing authorization credentials used to access network accessible resources.
type Credential struct {
	Root
	// The optional list of protocol-specific keys or assertions.
	Keys map[string]string `mapstructure:"keys" json:"keys,omitempty"`
	// The optional protocol name.
	Protocol string `mapstructure:"protocol" json:"protocol,omitempty"`
	// The required token used as a credential for authorization or access to a networked resource.
	Token string `mapstructure:"token" json:"token,omitempty"`
	// The required token type.
	TokenType string `mapstructure:"token_type" json:"token_type,omitempty"`
	// The optional user (name or ID) used for non-token based credentials.
	User string `mapstructure:"user" json:"user,omitempty"`
}

// Root is the generated representation of tosca.datatypes.Root data type
//
// The TOSCA root Data Type all other TOSCA base Data Types derive from
type Root struct {
}

// TimeInterval is the generated representation of tosca.datatypes.TimeInterval data type
type TimeInterval struct {
	Root
	EndTime   time.Time `mapstructure:"end_time" json:"end_time,omitempty"`
	StartTime time.Time `mapstructure:"start_time" json:"start_time,omitempty"`
}

// JSON is the generated representation of tosca.datatypes.json data type
type JSON string

// NetworkInfo is the generated representation of tosca.datatypes.network.NetworkInfo data type
//
// The Network type is a complex TOSCA data type used to describe logical network information.
type NetworkInfo struct {
	Root
	// The list of IP addresses assigned from the underlying network.
	Addresses []string `mapstructure:"addresses" json:"addresses,omitempty"`
	// The unique ID of for the network generated by the network provider.
	NetworkID string `mapstructure:"network_id" json:"network_id,omitempty"`
	// The name of the logical network. e.g., “public”, “private”, “admin”. etc.
	NetworkName string `mapstructure:"network_name" json:"network_name,omitempty"`
}

// PortDef is the generated representation of tosca.datatypes.network.PortDef data type
//
// The PortDef type is a TOSCA data Type used to define a network port.
type PortDef int

// PortInfo is the generated representation of tosca.datatypes.network.PortInfo data type
//
// The PortInfo type is a complex TOSCA data type used to describe network port information.
type PortInfo struct {
	Root
	// The list of IP address(es) assigned to the port.
	Addresses []string `mapstructure:"addresses" json:"addresses,omitempty"`
	// The unique media access control address (MAC address) assigned to the port.
	MacAddress string `mapstructure:"mac_address" json:"mac_address,omitempty"`
	// The unique ID for the network.
	NetworkID string `mapstructure:"network_id" json:"network_id,omitempty"`
	// The unique ID for the network port generated by the network provider.
	PortID string `mapstructure:"port_id" json:"port_id,omitempty"`
	// The logical network port name.
	PortName string `mapstructure:"port_name" json:"port_name,omitempty"`
}

// PortSpec is the generated representation of tosca.datatypes.network.PortSpec data type
//
// The PortSpec type is a complex TOSCA data Type used when describing port specifications for a network connection.
type PortSpec struct {
	Root
	// The required protocol used on the port.
	Protocol string `mapstructure:"protocol" json:"protocol,omitempty"`
	// The optional target port.
	Source PortDef `mapstructure:"source" json:"source,omitempty"`
	// The optional range for source port.
	SourceRange Range `mapstructure:"source_range" json:"source_range,omitempty"`
	// The optional target port.
	Target PortDef `mapstructure:"target" json:"target,omitempty"`
	// The optional range for target port.
	TargetRange Range `mapstructure:"target_range" json:"target_range,omitempty"`
}

// XML is the generated representation of tosca.datatypes.xml data type
type XML string

// Range is the generated representation of tosca:range data type
type Range []uint64

// ScalarUnit is the generated representation of tosca:scalar-unit data type
type ScalarUnit string

// ScalarUnitBitRate is the generated representation of tosca:scalar-unit.bitrate data type
type ScalarUnitBitRate ScalarUnit

// ScalarUnitFrequency is the generated representation of tosca:scalar-unit.frequency data type
type ScalarUnitFrequency ScalarUnit

// ScalarUnitSize is the generated representation of tosca:scalar-unit.size data type
type ScalarUnitSize ScalarUnit

// ScalarUnitTime is the generated representation of tosca:scalar-unit.time data type
type ScalarUnitTime ScalarUnit

// Version is the generated representation of tosca:version data type
type Version string
