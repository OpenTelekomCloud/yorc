// Copyright 2018 Bull S.A.S. Atos Technologies - Bull, Rue Jean Jaures, B.P.68, 78340, Les Clayes-sous-Bois, France.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-enum
// DO NOT EDIT!

package monitoring

import (
	"fmt"
	"strings"
)

const (
	// CheckStatusPASSING is a CheckStatus of type PASSING
	CheckStatusPASSING CheckStatus = iota
	// CheckStatusCRITICAL is a CheckStatus of type CRITICAL
	CheckStatusCRITICAL
)

const _CheckStatusName = "PASSINGCRITICAL"

var _CheckStatusMap = map[CheckStatus]string{
	0: _CheckStatusName[0:7],
	1: _CheckStatusName[7:15],
}

// String implements the Stringer interface.
func (x CheckStatus) String() string {
	if str, ok := _CheckStatusMap[x]; ok {
		return str
	}
	return fmt.Sprintf("CheckStatus(%d)", x)
}

var _CheckStatusValue = map[string]CheckStatus{
	_CheckStatusName[0:7]:                   0,
	strings.ToLower(_CheckStatusName[0:7]):  0,
	_CheckStatusName[7:15]:                  1,
	strings.ToLower(_CheckStatusName[7:15]): 1,
}

// ParseCheckStatus attempts to convert a string to a CheckStatus
func ParseCheckStatus(name string) (CheckStatus, error) {
	if x, ok := _CheckStatusValue[name]; ok {
		return x, nil
	}
	return CheckStatus(0), fmt.Errorf("%s is not a valid CheckStatus", name)
}
