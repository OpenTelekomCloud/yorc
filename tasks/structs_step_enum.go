// Code generated by go-enum
// DO NOT EDIT!

package tasks

import (
	"fmt"
	"strings"
)

const (
	// StepStatusINITIAL is a StepStatus of type INITIAL
	StepStatusINITIAL StepStatus = iota
	// StepStatusRUNNING is a StepStatus of type RUNNING
	StepStatusRUNNING
	// StepStatusDONE is a StepStatus of type DONE
	StepStatusDONE
	// StepStatusERROR is a StepStatus of type ERROR
	StepStatusERROR
	// StepStatusCANCELED is a StepStatus of type CANCELED
	StepStatusCANCELED
)

const _StepStatusName = "INITIALRUNNINGDONEERRORCANCELED"

var _StepStatusMap = map[StepStatus]string{
	0: _StepStatusName[0:7],
	1: _StepStatusName[7:14],
	2: _StepStatusName[14:18],
	3: _StepStatusName[18:23],
	4: _StepStatusName[23:31],
}

func (i StepStatus) String() string {
	if str, ok := _StepStatusMap[i]; ok {
		return str
	}
	return fmt.Sprintf("StepStatus(%d)", i)
}

var _StepStatusValue = map[string]StepStatus{
	_StepStatusName[0:7]:                    0,
	strings.ToLower(_StepStatusName[0:7]):   0,
	_StepStatusName[7:14]:                   1,
	strings.ToLower(_StepStatusName[7:14]):  1,
	_StepStatusName[14:18]:                  2,
	strings.ToLower(_StepStatusName[14:18]): 2,
	_StepStatusName[18:23]:                  3,
	strings.ToLower(_StepStatusName[18:23]): 3,
	_StepStatusName[23:31]:                  4,
	strings.ToLower(_StepStatusName[23:31]): 4,
}

// ParseStepStatus attempts to convert a string to a StepStatus
func ParseStepStatus(name string) (StepStatus, error) {
	if x, ok := _StepStatusValue[name]; ok {
		return StepStatus(x), nil
	}
	return StepStatus(0), fmt.Errorf("%s is not a valid StepStatus", name)
}
